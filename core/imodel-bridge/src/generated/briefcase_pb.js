/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
// source: briefcase.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.TwoProcessConnector.CodeProps', null, global);
goog.exportSymbol('proto.TwoProcessConnector.DetectChangeRequest', null, global);
goog.exportSymbol('proto.TwoProcessConnector.DetectChangeResult', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ExecuteECSqlRequest', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ExecuteECSqlResult', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ExternalSourceAspectIdentifier', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ExternalSourceAspectProps', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ExternalSourceState', null, global);
goog.exportSymbol('proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest', null, global);
goog.exportSymbol('proto.TwoProcessConnector.TryGetElementPropsRequest', null, global);
goog.exportSymbol('proto.TwoProcessConnector.TryGetElementPropsResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ExternalSourceAspectIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ExternalSourceAspectIdentifier.displayName = 'proto.TwoProcessConnector.ExternalSourceAspectIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.CodeProps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.CodeProps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.CodeProps.displayName = 'proto.TwoProcessConnector.CodeProps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.TryGetElementPropsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.TryGetElementPropsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.TryGetElementPropsRequest.displayName = 'proto.TwoProcessConnector.TryGetElementPropsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.TryGetElementPropsResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.TryGetElementPropsResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.TryGetElementPropsResult.displayName = 'proto.TwoProcessConnector.TryGetElementPropsResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ExternalSourceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ExternalSourceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ExternalSourceState.displayName = 'proto.TwoProcessConnector.ExternalSourceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ExternalSourceAspectProps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ExternalSourceAspectProps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ExternalSourceAspectProps.displayName = 'proto.TwoProcessConnector.ExternalSourceAspectProps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.displayName = 'proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.DetectChangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.DetectChangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.DetectChangeRequest.displayName = 'proto.TwoProcessConnector.DetectChangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.DetectChangeResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.DetectChangeResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.DetectChangeResult.displayName = 'proto.TwoProcessConnector.DetectChangeResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ExecuteECSqlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ExecuteECSqlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ExecuteECSqlRequest.displayName = 'proto.TwoProcessConnector.ExecuteECSqlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ExecuteECSqlResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ExecuteECSqlResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ExecuteECSqlResult.displayName = 'proto.TwoProcessConnector.ExecuteECSqlResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ExternalSourceAspectIdentifier;
  return proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string scopeId = 1;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.getScopeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.setScopeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identifier = 2;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string kind = 3;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.CodeProps.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.CodeProps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.CodeProps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.CodeProps.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.CodeProps}
 */
proto.TwoProcessConnector.CodeProps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.CodeProps;
  return proto.TwoProcessConnector.CodeProps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.CodeProps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.CodeProps}
 */
proto.TwoProcessConnector.CodeProps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.CodeProps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.CodeProps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.CodeProps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.CodeProps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.TwoProcessConnector.CodeProps.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.CodeProps} returns this
 */
proto.TwoProcessConnector.CodeProps.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.TwoProcessConnector.CodeProps.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.CodeProps} returns this
 */
proto.TwoProcessConnector.CodeProps.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.TwoProcessConnector.CodeProps.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.CodeProps} returns this
 */
proto.TwoProcessConnector.CodeProps.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.TryGetElementPropsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.TryGetElementPropsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id64: jspb.Message.getFieldWithDefault(msg, 1, ""),
    federationguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: (f = msg.getCode()) && proto.TwoProcessConnector.CodeProps.toObject(includeInstance, f),
    externalsourceaspectidentifier: (f = msg.getExternalsourceaspectidentifier()) && proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.TryGetElementPropsRequest;
  return proto.TwoProcessConnector.TryGetElementPropsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.TryGetElementPropsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId64(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFederationguid(value);
      break;
    case 3:
      var value = new proto.TwoProcessConnector.CodeProps;
      reader.readMessage(value,proto.TwoProcessConnector.CodeProps.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    case 4:
      var value = new proto.TwoProcessConnector.ExternalSourceAspectIdentifier;
      reader.readMessage(value,proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader);
      msg.setExternalsourceaspectidentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.TryGetElementPropsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.TryGetElementPropsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TwoProcessConnector.CodeProps.serializeBinaryToWriter
    );
  }
  f = message.getExternalsourceaspectidentifier();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id64 = 1;
 * @return {string}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getId64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setId64 = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearId64 = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasId64 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string federationGuid = 2;
 * @return {string}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getFederationguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setFederationguid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearFederationguid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasFederationguid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CodeProps code = 3;
 * @return {?proto.TwoProcessConnector.CodeProps}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getCode = function() {
  return /** @type{?proto.TwoProcessConnector.CodeProps} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.CodeProps, 3));
};


/**
 * @param {?proto.TwoProcessConnector.CodeProps|undefined} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
*/
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setCode = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearCode = function() {
  return this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasCode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExternalSourceAspectIdentifier externalSourceAspectIdentifier = 4;
 * @return {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getExternalsourceaspectidentifier = function() {
  return /** @type{?proto.TwoProcessConnector.ExternalSourceAspectIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.ExternalSourceAspectIdentifier, 4));
};


/**
 * @param {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier|undefined} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
*/
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setExternalsourceaspectidentifier = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearExternalsourceaspectidentifier = function() {
  return this.setExternalsourceaspectidentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasExternalsourceaspectidentifier = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.TryGetElementPropsResult.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.TryGetElementPropsResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.TryGetElementPropsResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.TryGetElementPropsResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    propsjson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsResult}
 */
proto.TwoProcessConnector.TryGetElementPropsResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.TryGetElementPropsResult;
  return proto.TwoProcessConnector.TryGetElementPropsResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.TryGetElementPropsResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsResult}
 */
proto.TwoProcessConnector.TryGetElementPropsResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropsjson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.TryGetElementPropsResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.TryGetElementPropsResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.TryGetElementPropsResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.TryGetElementPropsResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string propsJson = 2;
 * @return {string}
 */
proto.TwoProcessConnector.TryGetElementPropsResult.prototype.getPropsjson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsResult} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsResult.prototype.setPropsjson = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsResult} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsResult.prototype.clearPropsjson = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsResult.prototype.hasPropsjson = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ExternalSourceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ExternalSourceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    checksum: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ExternalSourceState}
 */
proto.TwoProcessConnector.ExternalSourceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ExternalSourceState;
  return proto.TwoProcessConnector.ExternalSourceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ExternalSourceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ExternalSourceState}
 */
proto.TwoProcessConnector.ExternalSourceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChecksum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ExternalSourceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ExternalSourceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceState} returns this
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.ExternalSourceState} returns this
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string checksum = 2;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.getChecksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceState} returns this
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.setChecksum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.ExternalSourceState} returns this
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.clearChecksum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.ExternalSourceState.prototype.hasChecksum = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ExternalSourceAspectProps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectProps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identifier: (f = msg.getIdentifier()) && proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.TwoProcessConnector.ExternalSourceState.toObject(includeInstance, f),
    jsonproperties: jspb.Message.getFieldWithDefault(msg, 4, ""),
    source: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ExternalSourceAspectProps;
  return proto.TwoProcessConnector.ExternalSourceAspectProps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectProps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setElementid(value);
      break;
    case 2:
      var value = new proto.TwoProcessConnector.ExternalSourceAspectIdentifier;
      reader.readMessage(value,proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 3:
      var value = new proto.TwoProcessConnector.ExternalSourceState;
      reader.readMessage(value,proto.TwoProcessConnector.ExternalSourceState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonproperties(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ExternalSourceAspectProps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectProps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TwoProcessConnector.ExternalSourceState.serializeBinaryToWriter
    );
  }
  f = message.getJsonproperties();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string elementId = 1;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getElementid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setElementid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ExternalSourceAspectIdentifier identifier = 2;
 * @return {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getIdentifier = function() {
  return /** @type{?proto.TwoProcessConnector.ExternalSourceAspectIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.ExternalSourceAspectIdentifier, 2));
};


/**
 * @param {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier|undefined} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
*/
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ExternalSourceState state = 3;
 * @return {?proto.TwoProcessConnector.ExternalSourceState}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getState = function() {
  return /** @type{?proto.TwoProcessConnector.ExternalSourceState} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.ExternalSourceState, 3));
};


/**
 * @param {?proto.TwoProcessConnector.ExternalSourceState|undefined} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
*/
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string jsonProperties = 4;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getJsonproperties = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setJsonproperties = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string source = 5;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.clearSource = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.hasSource = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalsourceaspectid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest;
  return proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalsourceaspectid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalsourceaspectid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string externalSourceAspectId = 1;
 * @return {string}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.getExternalsourceaspectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} returns this
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.setExternalsourceaspectid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.DetectChangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.DetectChangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.DetectChangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: (f = msg.getIdentifier()) && proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.TwoProcessConnector.ExternalSourceState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.DetectChangeRequest}
 */
proto.TwoProcessConnector.DetectChangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.DetectChangeRequest;
  return proto.TwoProcessConnector.DetectChangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.DetectChangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.DetectChangeRequest}
 */
proto.TwoProcessConnector.DetectChangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TwoProcessConnector.ExternalSourceAspectIdentifier;
      reader.readMessage(value,proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 2:
      var value = new proto.TwoProcessConnector.ExternalSourceState;
      reader.readMessage(value,proto.TwoProcessConnector.ExternalSourceState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.DetectChangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.DetectChangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.DetectChangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TwoProcessConnector.ExternalSourceState.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExternalSourceAspectIdentifier identifier = 1;
 * @return {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.getIdentifier = function() {
  return /** @type{?proto.TwoProcessConnector.ExternalSourceAspectIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.ExternalSourceAspectIdentifier, 1));
};


/**
 * @param {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier|undefined} value
 * @return {!proto.TwoProcessConnector.DetectChangeRequest} returns this
*/
proto.TwoProcessConnector.DetectChangeRequest.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.DetectChangeRequest} returns this
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExternalSourceState state = 2;
 * @return {?proto.TwoProcessConnector.ExternalSourceState}
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.getState = function() {
  return /** @type{?proto.TwoProcessConnector.ExternalSourceState} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.ExternalSourceState, 2));
};


/**
 * @param {?proto.TwoProcessConnector.ExternalSourceState|undefined} value
 * @return {!proto.TwoProcessConnector.DetectChangeRequest} returns this
*/
proto.TwoProcessConnector.DetectChangeRequest.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.DetectChangeRequest} returns this
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.DetectChangeRequest.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.DetectChangeResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.DetectChangeResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.DetectChangeResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    externalsourceaspectid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ischanged: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.DetectChangeResult}
 */
proto.TwoProcessConnector.DetectChangeResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.DetectChangeResult;
  return proto.TwoProcessConnector.DetectChangeResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.DetectChangeResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.DetectChangeResult}
 */
proto.TwoProcessConnector.DetectChangeResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setElementid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalsourceaspectid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIschanged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.DetectChangeResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.DetectChangeResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.DetectChangeResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string elementId = 1;
 * @return {string}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.getElementid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.DetectChangeResult} returns this
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.setElementid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.DetectChangeResult} returns this
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.clearElementid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.hasElementid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string externalSourceAspectId = 2;
 * @return {string}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.getExternalsourceaspectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.DetectChangeResult} returns this
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.setExternalsourceaspectid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.DetectChangeResult} returns this
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.clearExternalsourceaspectid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.hasExternalsourceaspectid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isChanged = 3;
 * @return {boolean}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.getIschanged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TwoProcessConnector.DetectChangeResult} returns this
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.setIschanged = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.DetectChangeResult} returns this
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.clearIschanged = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.DetectChangeResult.prototype.hasIschanged = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ExecuteECSqlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ExecuteECSqlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecsqlstatement: jspb.Message.getFieldWithDefault(msg, 2, ""),
    params: jspb.Message.getFieldWithDefault(msg, 3, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ExecuteECSqlRequest}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ExecuteECSqlRequest;
  return proto.TwoProcessConnector.ExecuteECSqlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ExecuteECSqlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ExecuteECSqlRequest}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEcsqlstatement(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParams(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ExecuteECSqlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ExecuteECSqlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcsqlstatement();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParams();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string ecSqlStatement = 2;
 * @return {string}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.getEcsqlstatement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExecuteECSqlRequest} returns this
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.setEcsqlstatement = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string params = 3;
 * @return {string}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.getParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExecuteECSqlRequest} returns this
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.setParams = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TwoProcessConnector.ExecuteECSqlRequest} returns this
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 offset = 5;
 * @return {number}
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TwoProcessConnector.ExecuteECSqlRequest} returns this
 */
proto.TwoProcessConnector.ExecuteECSqlRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ExecuteECSqlResult.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ExecuteECSqlResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ExecuteECSqlResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExecuteECSqlResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rowsjson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ExecuteECSqlResult}
 */
proto.TwoProcessConnector.ExecuteECSqlResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ExecuteECSqlResult;
  return proto.TwoProcessConnector.ExecuteECSqlResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ExecuteECSqlResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ExecuteECSqlResult}
 */
proto.TwoProcessConnector.ExecuteECSqlResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRowsjson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ExecuteECSqlResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ExecuteECSqlResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ExecuteECSqlResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExecuteECSqlResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRowsjson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.TwoProcessConnector.ExecuteECSqlResult.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TwoProcessConnector.ExecuteECSqlResult} returns this
 */
proto.TwoProcessConnector.ExecuteECSqlResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string rowsJson = 2;
 * @return {string}
 */
proto.TwoProcessConnector.ExecuteECSqlResult.prototype.getRowsjson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExecuteECSqlResult} returns this
 */
proto.TwoProcessConnector.ExecuteECSqlResult.prototype.setRowsjson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.TwoProcessConnector);
