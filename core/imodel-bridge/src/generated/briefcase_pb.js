/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
// source: briefcase.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.TwoProcessConnector.CodeProps', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ElementLoadOptions', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ElementProps', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ExternalSourceAspectIdentifier', null, global);
goog.exportSymbol('proto.TwoProcessConnector.ExternalSourceAspectProps', null, global);
goog.exportSymbol('proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest', null, global);
goog.exportSymbol('proto.TwoProcessConnector.TryGetElementPropsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ExternalSourceAspectIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ExternalSourceAspectIdentifier.displayName = 'proto.TwoProcessConnector.ExternalSourceAspectIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.CodeProps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.CodeProps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.CodeProps.displayName = 'proto.TwoProcessConnector.CodeProps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ElementLoadOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ElementLoadOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ElementLoadOptions.displayName = 'proto.TwoProcessConnector.ElementLoadOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.TryGetElementPropsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.TryGetElementPropsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.TryGetElementPropsRequest.displayName = 'proto.TwoProcessConnector.TryGetElementPropsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.displayName = 'proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ExternalSourceAspectProps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ExternalSourceAspectProps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ExternalSourceAspectProps.displayName = 'proto.TwoProcessConnector.ExternalSourceAspectProps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TwoProcessConnector.ElementProps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TwoProcessConnector.ElementProps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TwoProcessConnector.ElementProps.displayName = 'proto.TwoProcessConnector.ElementProps';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ExternalSourceAspectIdentifier;
  return proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string scopeId = 1;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.getScopeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.setScopeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identifier = 2;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string kind = 3;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectIdentifier} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectIdentifier.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.CodeProps.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.CodeProps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.CodeProps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.CodeProps.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.CodeProps}
 */
proto.TwoProcessConnector.CodeProps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.CodeProps;
  return proto.TwoProcessConnector.CodeProps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.CodeProps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.CodeProps}
 */
proto.TwoProcessConnector.CodeProps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.CodeProps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.CodeProps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.CodeProps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.CodeProps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.TwoProcessConnector.CodeProps.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.CodeProps} returns this
 */
proto.TwoProcessConnector.CodeProps.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.TwoProcessConnector.CodeProps.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.CodeProps} returns this
 */
proto.TwoProcessConnector.CodeProps.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.TwoProcessConnector.CodeProps.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.CodeProps} returns this
 */
proto.TwoProcessConnector.CodeProps.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ElementLoadOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ElementLoadOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ElementLoadOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    wantgeometry: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    wantbrepdata: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ElementLoadOptions}
 */
proto.TwoProcessConnector.ElementLoadOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ElementLoadOptions;
  return proto.TwoProcessConnector.ElementLoadOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ElementLoadOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ElementLoadOptions}
 */
proto.TwoProcessConnector.ElementLoadOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWantgeometry(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWantbrepdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ElementLoadOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ElementLoadOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ElementLoadOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool wantGeometry = 1;
 * @return {boolean}
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.getWantgeometry = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TwoProcessConnector.ElementLoadOptions} returns this
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.setWantgeometry = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.ElementLoadOptions} returns this
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.clearWantgeometry = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.hasWantgeometry = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool wantBRepData = 2;
 * @return {boolean}
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.getWantbrepdata = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TwoProcessConnector.ElementLoadOptions} returns this
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.setWantbrepdata = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.ElementLoadOptions} returns this
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.clearWantbrepdata = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.ElementLoadOptions.prototype.hasWantbrepdata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.TryGetElementPropsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.TryGetElementPropsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id64: jspb.Message.getFieldWithDefault(msg, 1, ""),
    federationguid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: (f = msg.getCode()) && proto.TwoProcessConnector.CodeProps.toObject(includeInstance, f),
    externalsourceaspect: (f = msg.getExternalsourceaspect()) && proto.TwoProcessConnector.ExternalSourceAspectIdentifier.toObject(includeInstance, f),
    elementloadoptions: (f = msg.getElementloadoptions()) && proto.TwoProcessConnector.ElementLoadOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.TryGetElementPropsRequest;
  return proto.TwoProcessConnector.TryGetElementPropsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.TryGetElementPropsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId64(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFederationguid(value);
      break;
    case 3:
      var value = new proto.TwoProcessConnector.CodeProps;
      reader.readMessage(value,proto.TwoProcessConnector.CodeProps.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    case 4:
      var value = new proto.TwoProcessConnector.ExternalSourceAspectIdentifier;
      reader.readMessage(value,proto.TwoProcessConnector.ExternalSourceAspectIdentifier.deserializeBinaryFromReader);
      msg.setExternalsourceaspect(value);
      break;
    case 5:
      var value = new proto.TwoProcessConnector.ElementLoadOptions;
      reader.readMessage(value,proto.TwoProcessConnector.ElementLoadOptions.deserializeBinaryFromReader);
      msg.setElementloadoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.TryGetElementPropsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.TryGetElementPropsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TwoProcessConnector.CodeProps.serializeBinaryToWriter
    );
  }
  f = message.getExternalsourceaspect();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TwoProcessConnector.ExternalSourceAspectIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getElementloadoptions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.TwoProcessConnector.ElementLoadOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id64 = 1;
 * @return {string}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getId64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setId64 = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearId64 = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasId64 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string federationGuid = 2;
 * @return {string}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getFederationguid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setFederationguid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearFederationguid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasFederationguid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CodeProps code = 3;
 * @return {?proto.TwoProcessConnector.CodeProps}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getCode = function() {
  return /** @type{?proto.TwoProcessConnector.CodeProps} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.CodeProps, 3));
};


/**
 * @param {?proto.TwoProcessConnector.CodeProps|undefined} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
*/
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setCode = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearCode = function() {
  return this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasCode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExternalSourceAspectIdentifier externalSourceAspect = 4;
 * @return {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getExternalsourceaspect = function() {
  return /** @type{?proto.TwoProcessConnector.ExternalSourceAspectIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.ExternalSourceAspectIdentifier, 4));
};


/**
 * @param {?proto.TwoProcessConnector.ExternalSourceAspectIdentifier|undefined} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
*/
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setExternalsourceaspect = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearExternalsourceaspect = function() {
  return this.setExternalsourceaspect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasExternalsourceaspect = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ElementLoadOptions elementLoadOptions = 5;
 * @return {?proto.TwoProcessConnector.ElementLoadOptions}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.getElementloadoptions = function() {
  return /** @type{?proto.TwoProcessConnector.ElementLoadOptions} */ (
    jspb.Message.getWrapperField(this, proto.TwoProcessConnector.ElementLoadOptions, 5));
};


/**
 * @param {?proto.TwoProcessConnector.ElementLoadOptions|undefined} value
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
*/
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.setElementloadoptions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TwoProcessConnector.TryGetElementPropsRequest} returns this
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.clearElementloadoptions = function() {
  return this.setElementloadoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TwoProcessConnector.TryGetElementPropsRequest.prototype.hasElementloadoptions = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalsourceaspectid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest;
  return proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalsourceaspectid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalsourceaspectid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string externalSourceAspectId = 1;
 * @return {string}
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.getExternalsourceaspectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest} returns this
 */
proto.TwoProcessConnector.GetExternalSourceAspectPropsRequest.prototype.setExternalsourceaspectid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ExternalSourceAspectProps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectProps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, ""),
    checksum: jspb.Message.getFieldWithDefault(msg, 5, ""),
    jsonproperties: jspb.Message.getFieldWithDefault(msg, 6, ""),
    source: jspb.Message.getFieldWithDefault(msg, 7, ""),
    element: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ExternalSourceAspectProps;
  return proto.TwoProcessConnector.ExternalSourceAspectProps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectProps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChecksum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonproperties(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ExternalSourceAspectProps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ExternalSourceAspectProps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChecksum();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getJsonproperties();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getElement();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string scopeId = 1;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getScopeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setScopeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identifier = 2;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string kind = 3;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string checksum = 5;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getChecksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setChecksum = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string jsonProperties = 6;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getJsonproperties = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setJsonproperties = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string source = 7;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string element = 8;
 * @return {string}
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.getElement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ExternalSourceAspectProps} returns this
 */
proto.TwoProcessConnector.ExternalSourceAspectProps.prototype.setElement = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TwoProcessConnector.ElementProps.prototype.toObject = function(opt_includeInstance) {
  return proto.TwoProcessConnector.ElementProps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TwoProcessConnector.ElementProps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ElementProps.toObject = function(includeInstance, msg) {
  var f, obj = {
    propsjson: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TwoProcessConnector.ElementProps}
 */
proto.TwoProcessConnector.ElementProps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TwoProcessConnector.ElementProps;
  return proto.TwoProcessConnector.ElementProps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TwoProcessConnector.ElementProps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TwoProcessConnector.ElementProps}
 */
proto.TwoProcessConnector.ElementProps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropsjson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TwoProcessConnector.ElementProps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TwoProcessConnector.ElementProps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TwoProcessConnector.ElementProps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TwoProcessConnector.ElementProps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropsjson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string propsJson = 1;
 * @return {string}
 */
proto.TwoProcessConnector.ElementProps.prototype.getPropsjson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TwoProcessConnector.ElementProps} returns this
 */
proto.TwoProcessConnector.ElementProps.prototype.setPropsjson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.TwoProcessConnector);
