/*
 * This interface is implemented by a non-iModel.js program and is called by an iModel.js program.
 */
 syntax = "proto3";

import "google/protobuf/empty.proto";

package TwoProcessConnector;

/* Input to the initialize request */
message InitializeRequest {
  /* The name of the input file to the connector */
  string filename = 1;
}

/* Returned by the initialize request handler */
message InitializeResponse {
  /* If the Reader cannot start up, return a human-readable explanation here */
  optional string failureReason = 1;
}

/* Input to the getData request */
message GetDataRequest {
  /* future use */
  string req = 1;
}

/* A single item in the stream of objects returned by getData */
message GetDataResponse {
  string data = 1;
}

/* Input to the onBriefcaseServerAvailable request */
message OnBriefcaseServerAvailableParams {
  string address = 1;
}

/* Input to the shutdown request */
message ShutdownRequest {
  /* if 0, the client has finished sucessfully; otherwise, the client is shutting down due to an error. */
  int32 status = 1;
}

/* Query an external source.
 * The functions in this service are implemented by a non-iModel.js "reader" program. They are called by an iModel.js connector. They
 * give the iModel.js connector a way to fetch data from an external source that is not directly accessible to it. The "reader" program is the intermediary.
 * The main function is `getData`. The reader program should implement this by *streaming* all of the data in the external source back to the requesting connector.
 * The `onBriefcaseServerAvailable` function gives the reader the address of a service that is implemented by the iModel.js program. See briefcase.proto.
 * The reader program can use the briefcase service to send queries back to the connector. The reader can even send briefcase requests to the connector (and wait for answers)
 * while in the midst of handling a request from the connector.
 */
service Reader {
  /* Tell the reader to initialize. The input file to the connector is passed as a parameter, in case the Reader wants to open that or use it in some way. */
  rpc initialize(InitializeRequest) returns (InitializeResponse) {}
  /* Inform the Reader that a server is now available to take requests to query the briefcase */
  rpc onBriefcaseServerAvailable(OnBriefcaseServerAvailableParams) returns (google.protobuf.Empty);
  /* The Reader should send the data in the external source to the client (in a stream) */
  rpc getData(GetDataRequest) returns (stream GetDataResponse) {}
  /* The Reader should shut down */
  rpc shutdown(ShutdownRequest) returns (google.protobuf.Empty);
}
