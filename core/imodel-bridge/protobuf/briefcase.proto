/*
 * This interface is implemented by the iModel.js program and is called by a non-iModel.js program.
 */
syntax = "proto3";

package TwoProcessConnector;

/* Look up an ExternalSourceAspect in the iModel */
message ExternalSourceAspectIdentifier {
  /* An element that scopes the combination of `kind` and `identifier` to uniquely identify the object from the external source. Set this to '0' if there is not scope. */
  string scopeId = 1;
  /* The identifier of the object in the source repository. */
  string identifier = 2;
  /* The kind of object within the source repository. */
  string kind = 3;
}

message CodeProps {
  /* Name of CodeSpec */
  string spec = 1;
  /* Id64 of element that is the scope of the code */
  string scope = 2;
  /* The code value */
  string value = 3;
}

/* Look up an element in various ways: by internal Id64, by federation GUID, by Code, or via a mapping to external data.
 * This query returns the properties of the element (if found) in the form of a JSON-encoded string. That is because the
 * set of properties that an element can have varies by subclass (polymorphism). This function returns all of the properties
 * of the element according to its actual class. (It does not return only those properties that are common to all elements.)
 */
message TryGetElementPropsRequest {
  /* The Id64 of the element in the iModel. */
  optional string id64 = 1;
  /* The federation GUID. */
  optional string federationGuid = 2;
  /* The code of the element in the iModel. */
  optional CodeProps code = 3;
  /* Identifies data in the external source that is mapped to the element of interest in the iModel */
  optional ExternalSourceAspectIdentifier externalSourceAspectIdentifier = 4;
}

/* Result of tryGetElementProps. `propsJson` will be the empty string if the element was not found. */
message TryGetElementPropsResult {
  /* The element's properties as a JSON string. */
  optional string propsJson = 2;
}

/* The state of an item in the external source. If version is provided, then change-detection is based on this value alone. If not, then checksum must be provided. */
message ExternalSourceState {
  /* The "version number" of the item content. */
  optional string version = 1;
  /* The cryptographic hash (any algorithm) of the item's content. */
  optional string checksum = 2;
}

/* The properties of an ExternalSourceAspect. */
message ExternalSourceAspectProps {
  /* The Id64 of the element that owns this external source aspect */
  string elementId = 1;
  /* Identifies the data in the external source */
  ExternalSourceAspectIdentifier identifier = 2;
  /* The last-known state of the item that is stored in the iModel. */
  ExternalSourceState state = 3;
  /* Additional JSON properties of the aspect. */
  string jsonProperties = 4;
  /* The Id64 of the ExternalSource element that is the source of the imported/synchronized object. Should point to an instance of ExternalSource. */
  optional string source = 5;
}

/* The input to the GetExternalSourceAspectProps request */
message GetExternalSourceAspectPropsRequest {
  /* The Id64 of the ExternalSourceAspect in the iModel. */
  string externalSourceAspectId = 1;
}

/* Input to the detectChange request */
message DetectChangeRequest {
  /* Identifies the data in the external source */
  ExternalSourceAspectIdentifier identifier = 1;
  /* The item's current state in the external state */
  ExternalSourceState state = 2;
}

/* The result of detectChange. Here is how to interpret the results:
 * -- If `elementId` is empty, then the external item is not mapped to the iModel.
 * -- Otherwise, the external item is mapped to the specified element.
 *     -- If `isChanged` is false, then the external item has not changed since the last synchronization.
 *     -- Otherwise, the external item has changed.
 */
message DetectChangeResult {
  /* The Id64 of the element in the iModel that is mapped to the specified external data. If this is not defined, that means that detectChange did not find any element the iModel mapped to the external data. */
  optional string elementId = 1;
  /* The Id64 of the ExternalSourceAspect of the element in the iModel, if found. */
  optional string externalSourceAspectId = 2;
  /* This will be true if a) an element in the iModel is mapped to the external data, and b) the last-known source state is different from the specified current state. */
  optional bool isChanged = 3;
}

/* Input to the ExecuteECSql request */
message ExecuteECSqlRequest {
  string ecSqlStatement = 2;
  string params = 3;
  int32 limit = 4;
  int32 offset = 5;
}

/* The result of ExecuteECSql. */
message ExecuteECSqlResult {
  /* The SQLITE return status from the query. BE_SQLITE_ROW = 100, BE_SQLITE_DONE = 101. Other values indicate various errors, as documented for SQLite */
  int32 status = 1;
  /* the returned rows in JSON-encoded string format. Will be the empty string in case of no rows or error. */
  string rowsJson = 2;
}

/* Query an iModel Briefcase.
 * The functions in this service allow a non-iModel.js server to get information from an open briefcase.
 * ExecuteECSql is the basic and most general method of querying the iModel.
 * TryGetElementProps is a simplified method to get the properties of an element.
 * GetExternalSourceAspectProps is specialized to getting the properties of an ExternalSourceAspect, and its results is strongly typed.
 * DetectChange is a short-cut query that looks up an ExternalSourceAspect by its external identity and checks its version or checksum.
 */
service Briefcase {
  /* Detect if the specified external data is mapped to an element and, if so, if the last-recorded state of the data is different from its current state. */
  rpc DetectChange(DetectChangeRequest) returns (DetectChangeResult) {}
  /* Look up an element in the iModel. */
  rpc TryGetElementProps(TryGetElementPropsRequest) returns (TryGetElementPropsResult) {}
  /* Get the properties of an ExernalSourceAspect. If not found, all of the properties of the returned object will have default values (i.e., elementId will be empty). See DetectChange for how to get the input externalSourceAspectId. */
  rpc GetExternalSourceAspectProps(GetExternalSourceAspectPropsRequest) returns (ExternalSourceAspectProps) {}
  /* Execute an ECSql statement */
  rpc ExecuteECSql(ExecuteECSqlRequest) returns (ExecuteECSqlResult) {}
}
